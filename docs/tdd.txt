TDD = Teste Drive Development
      Desenvolvimento Direcionado por Testes
                        BSTQB --> PARA***

Quando fizemos o teste de unidade? 
- antes de codificar?   <-- TDD
- depois de codificar?   <--- vimos nas aulas anteriores (comum)

Exemplo: 

let somarDoisNumerosTdd = function somarDoisNumerosTdd(num1, num2) {
    // ToDo: programar a soma de 2 números
    return 0;
}

- Reunião de Sprint Planning
> O time junto definiu 2 estórias
> Essas estórias, os desenvedores (devs) entenderam que vão render 10 funcionalidades

Eles são capazes de combinar e escrever:
1 - o nome de cada uma das funcionalidades
2- os parametros de entrada (input)
3- comentários sobre as funcionalidades
4- deixar um retorno temporário (mock)

Poderiam fazer então os esqueletos de código para as 10 funcionalidades!

Perguntas:
1 - Se eles têm esses esqueletos, eles podem criar já os testes de unidade?
    R: Sim (se só depende do time) ou depende (se precisamos de permissao ou recursos externos)
2 - Esses testes de unidade inicialmente darão que resultado? (passar/falhar)
    R: Os testes devem falhar inicialmente, porque o resultado sempre será 0 ou null  logo não estará funcionando
        Cuidado - Relógio quebrado mostra duas horas certas por dia.
3- Para que serve fazer 10 testes de unidade que não passam inicialmente?
    Exemplo:
                                             dia         falhou    passou
nada pronto                                 1           10         0
começarama  rechear e 2 firam prontas       2            8         2    -> 20% pronto (métrica de progresso)
conseguiram adiantar                        3            5         5    -> 50% pronto (recuperei parte do atraso)
passaram 6 e falharam 4                     4            6         4    -> 40% pronto (algo novo quebrou algo antigo)
passou tudo                                 5            0        10    -> 100% Corrigiu e completou o backlog da semana

        Gráfico de Burndown 

        10  ##
        
                ##

                    PP
        05
                        PP
                            PP

        01
        -------------------------------------------------
           01   02  03  04  05

Resumindo o TDD:
- Criação dos testes de unidade antes da codificação principal.
- execução pelo menos diaria dos testes de unidade
- Objetivo:
        - Medir o progresso (software funcionando)
        - Ter testes básicos para garantir a estabilidade (grantir que algo que estava funcionando parou de funcionar)
- como reduzir o risco de fraude? 
  através do code review (revisão de código)
    - o code reviewajuda muito:
        -aumenta a maturidade
        - melhora a qualidade do código
        - criar padronização
        - aprender e disseminar boas práticas de codificação

Teste de Unidade com grande cobertura (>= 75%) garante o funcionamento básico (mínimo)
- repetitivel
- rápido de fazer e modificar
- barato
- aliado / faz parte da estratégia de integração continua (IC,br / CI:continuos integration)

INTEGRAÇÃO CONTINUA --> Criar uma pipeline / esteira

Devs (local / ambiente de desenvolvimento) 
                      (compilar) 
codificam    hora       build            passou
o tempo todo --> Commit -----> testes de ------> mover o -----> ambiente de teste
               (salva no        unidade          release        stage / pré-produção
              repositório)     + outros          candidate        (mais testes)
                               
Quando algo ainda está em trabalho:
- ou faz o commit "desligado"
- ou faz um shelve ao invés de commit

Compilar na própria máquina é perigoso
--> "na minha máquina funciona" --> DLL Hell
Porque a maquina do dev tem um monte de bibliotecas e recursos que o cliente ou o servidor de produção não tem.

"Ninguem atravessa o mesmo rio duas vezes"

Se esse processo automatizado chega a implantar em produção 
então, ele passa a se chamar entrega continua (Continuous Delivery)

Nirvana